// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v6.32.0
// source: account/v1/account.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AccountServiceClient is the client API for AccountService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountServiceClient interface {
	FindWallet(ctx context.Context, in *FindWalletRequest, opts ...grpc.CallOption) (*FindWalletResponse, error)
	LockAccount(ctx context.Context, in *LockAccountRequest, opts ...grpc.CallOption) (*LockAccountResponse, error)
	UpdateAccount(ctx context.Context, in *UpdateAccountRequest, opts ...grpc.CallOption) (*UpdateAccountResponse, error)
	FreezeAccount(ctx context.Context, in *FreezeAccountRequest, opts ...grpc.CallOption) (*FreezeAccountResponse, error)
	CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error)
	FindAccountById(ctx context.Context, in *FindAccountByIdRequest, opts ...grpc.CallOption) (*FindAccountByIdResponse, error)
	FindAccountsByCurrencyOrType(ctx context.Context, in *FindAccountsByCurrencyOrTypeRequest, opts ...grpc.CallOption) (*FindAccountsByCurrencyOrTypeResponse, error)
	FindAccountByCurrencyAndType(ctx context.Context, in *FindAccountByCurrencyAndTypeRequest, opts ...grpc.CallOption) (*FindAccountByCurrencyAndTypeResponse, error)
}

type accountServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountServiceClient(cc grpc.ClientConnInterface) AccountServiceClient {
	return &accountServiceClient{cc}
}

func (c *accountServiceClient) FindWallet(ctx context.Context, in *FindWalletRequest, opts ...grpc.CallOption) (*FindWalletResponse, error) {
	out := new(FindWalletResponse)
	err := c.cc.Invoke(ctx, "/proto.account.v1.AccountService/FindWallet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) LockAccount(ctx context.Context, in *LockAccountRequest, opts ...grpc.CallOption) (*LockAccountResponse, error) {
	out := new(LockAccountResponse)
	err := c.cc.Invoke(ctx, "/proto.account.v1.AccountService/LockAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) UpdateAccount(ctx context.Context, in *UpdateAccountRequest, opts ...grpc.CallOption) (*UpdateAccountResponse, error) {
	out := new(UpdateAccountResponse)
	err := c.cc.Invoke(ctx, "/proto.account.v1.AccountService/UpdateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) FreezeAccount(ctx context.Context, in *FreezeAccountRequest, opts ...grpc.CallOption) (*FreezeAccountResponse, error) {
	out := new(FreezeAccountResponse)
	err := c.cc.Invoke(ctx, "/proto.account.v1.AccountService/FreezeAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) CreateAccount(ctx context.Context, in *CreateAccountRequest, opts ...grpc.CallOption) (*CreateAccountResponse, error) {
	out := new(CreateAccountResponse)
	err := c.cc.Invoke(ctx, "/proto.account.v1.AccountService/CreateAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) FindAccountById(ctx context.Context, in *FindAccountByIdRequest, opts ...grpc.CallOption) (*FindAccountByIdResponse, error) {
	out := new(FindAccountByIdResponse)
	err := c.cc.Invoke(ctx, "/proto.account.v1.AccountService/FindAccountById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) FindAccountsByCurrencyOrType(ctx context.Context, in *FindAccountsByCurrencyOrTypeRequest, opts ...grpc.CallOption) (*FindAccountsByCurrencyOrTypeResponse, error) {
	out := new(FindAccountsByCurrencyOrTypeResponse)
	err := c.cc.Invoke(ctx, "/proto.account.v1.AccountService/FindAccountsByCurrencyOrType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountServiceClient) FindAccountByCurrencyAndType(ctx context.Context, in *FindAccountByCurrencyAndTypeRequest, opts ...grpc.CallOption) (*FindAccountByCurrencyAndTypeResponse, error) {
	out := new(FindAccountByCurrencyAndTypeResponse)
	err := c.cc.Invoke(ctx, "/proto.account.v1.AccountService/FindAccountByCurrencyAndType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountServiceServer is the server API for AccountService service.
// All implementations must embed UnimplementedAccountServiceServer
// for forward compatibility
type AccountServiceServer interface {
	FindWallet(context.Context, *FindWalletRequest) (*FindWalletResponse, error)
	LockAccount(context.Context, *LockAccountRequest) (*LockAccountResponse, error)
	UpdateAccount(context.Context, *UpdateAccountRequest) (*UpdateAccountResponse, error)
	FreezeAccount(context.Context, *FreezeAccountRequest) (*FreezeAccountResponse, error)
	CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error)
	FindAccountById(context.Context, *FindAccountByIdRequest) (*FindAccountByIdResponse, error)
	FindAccountsByCurrencyOrType(context.Context, *FindAccountsByCurrencyOrTypeRequest) (*FindAccountsByCurrencyOrTypeResponse, error)
	FindAccountByCurrencyAndType(context.Context, *FindAccountByCurrencyAndTypeRequest) (*FindAccountByCurrencyAndTypeResponse, error)
	mustEmbedUnimplementedAccountServiceServer()
}

// UnimplementedAccountServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAccountServiceServer struct {
}

func (UnimplementedAccountServiceServer) FindWallet(context.Context, *FindWalletRequest) (*FindWalletResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindWallet not implemented")
}
func (UnimplementedAccountServiceServer) LockAccount(context.Context, *LockAccountRequest) (*LockAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LockAccount not implemented")
}
func (UnimplementedAccountServiceServer) UpdateAccount(context.Context, *UpdateAccountRequest) (*UpdateAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAccount not implemented")
}
func (UnimplementedAccountServiceServer) FreezeAccount(context.Context, *FreezeAccountRequest) (*FreezeAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FreezeAccount not implemented")
}
func (UnimplementedAccountServiceServer) CreateAccount(context.Context, *CreateAccountRequest) (*CreateAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAccount not implemented")
}
func (UnimplementedAccountServiceServer) FindAccountById(context.Context, *FindAccountByIdRequest) (*FindAccountByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAccountById not implemented")
}
func (UnimplementedAccountServiceServer) FindAccountsByCurrencyOrType(context.Context, *FindAccountsByCurrencyOrTypeRequest) (*FindAccountsByCurrencyOrTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAccountsByCurrencyOrType not implemented")
}
func (UnimplementedAccountServiceServer) FindAccountByCurrencyAndType(context.Context, *FindAccountByCurrencyAndTypeRequest) (*FindAccountByCurrencyAndTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAccountByCurrencyAndType not implemented")
}
func (UnimplementedAccountServiceServer) mustEmbedUnimplementedAccountServiceServer() {}

// UnsafeAccountServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountServiceServer will
// result in compilation errors.
type UnsafeAccountServiceServer interface {
	mustEmbedUnimplementedAccountServiceServer()
}

func RegisterAccountServiceServer(s grpc.ServiceRegistrar, srv AccountServiceServer) {
	s.RegisterService(&AccountService_ServiceDesc, srv)
}

func _AccountService_FindWallet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindWalletRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).FindWallet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.account.v1.AccountService/FindWallet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).FindWallet(ctx, req.(*FindWalletRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_LockAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).LockAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.account.v1.AccountService/LockAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).LockAccount(ctx, req.(*LockAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_UpdateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).UpdateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.account.v1.AccountService/UpdateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).UpdateAccount(ctx, req.(*UpdateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_FreezeAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FreezeAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).FreezeAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.account.v1.AccountService/FreezeAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).FreezeAccount(ctx, req.(*FreezeAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_CreateAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).CreateAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.account.v1.AccountService/CreateAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).CreateAccount(ctx, req.(*CreateAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_FindAccountById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAccountByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).FindAccountById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.account.v1.AccountService/FindAccountById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).FindAccountById(ctx, req.(*FindAccountByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_FindAccountsByCurrencyOrType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAccountsByCurrencyOrTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).FindAccountsByCurrencyOrType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.account.v1.AccountService/FindAccountsByCurrencyOrType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).FindAccountsByCurrencyOrType(ctx, req.(*FindAccountsByCurrencyOrTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountService_FindAccountByCurrencyAndType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAccountByCurrencyAndTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountServiceServer).FindAccountByCurrencyAndType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.account.v1.AccountService/FindAccountByCurrencyAndType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountServiceServer).FindAccountByCurrencyAndType(ctx, req.(*FindAccountByCurrencyAndTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AccountService_ServiceDesc is the grpc.ServiceDesc for AccountService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.account.v1.AccountService",
	HandlerType: (*AccountServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindWallet",
			Handler:    _AccountService_FindWallet_Handler,
		},
		{
			MethodName: "LockAccount",
			Handler:    _AccountService_LockAccount_Handler,
		},
		{
			MethodName: "UpdateAccount",
			Handler:    _AccountService_UpdateAccount_Handler,
		},
		{
			MethodName: "FreezeAccount",
			Handler:    _AccountService_FreezeAccount_Handler,
		},
		{
			MethodName: "CreateAccount",
			Handler:    _AccountService_CreateAccount_Handler,
		},
		{
			MethodName: "FindAccountById",
			Handler:    _AccountService_FindAccountById_Handler,
		},
		{
			MethodName: "FindAccountsByCurrencyOrType",
			Handler:    _AccountService_FindAccountsByCurrencyOrType_Handler,
		},
		{
			MethodName: "FindAccountByCurrencyAndType",
			Handler:    _AccountService_FindAccountByCurrencyAndType_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "account/v1/account.proto",
}
